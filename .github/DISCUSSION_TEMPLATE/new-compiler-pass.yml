labels: ["New Compiler Pass"]
title: "[NEW PASS] "
body:
  - type: markdown
    attributes:
      value: |
        > #### _What's a "compiler pass?"_
        > In UCC (Unitary Compiler Collection), we consider any technique which takes a "raw" uncompiled quantum circuit and returns a circuit which performs better on our [benchmarks](https://github.com/unitaryfoundation/ucc-bench?tab=readme-ov-file#latest-results) to be a good compiler pass. You can work at any layer of the quantum computing stack, from low-level hardware control to high-level algorithmic optimization.

  - type: markdown
    attributes:
      value: |
        ### Propose your compiler pass
        So you want to implement a new compilation technique in UCC? Huzzah! To get started, please tell us:

  - type: textarea
    id: technique_work
    attributes:
      label: "1. How the technique works"
      description: |
        a. Provide a written abstract without too much jargon (cite arXiv paper/GitHub repo if applicable)  
        b. *(Optional)* Attach a diagram showing an example circuit transformation (you can add this later)
      placeholder: |
        Example response:
        "This pass optimizes 2-qubit gate sequences using techniques from [Paper XYZ]. Here's how it transforms a CX gate sequence..."
    validations:
      required: true
  
  - type: textarea
    id: performance_expectations
    attributes:
      label: "2. Performance expectations"
      description: |
        a. What circuit types will this improve? (e.g., dynamic circuits, error correction)  
        b. Which [UCC metrics](https://ucc.readthedocs.io/en/latest/benchmarking.html) will it impact? (gate counts, errors, etc.)
      placeholder: |
        Example response:
        "This should reduce 2-qubit gates in circuits with >50 Toffoli gates..."
    validations:
      required: false

  - type: markdown
    attributes:
      value: |
        **Important**  
        After completing sections 1-2, click "Start discussion" at the bottom of this page. **Keep the template structure intact!**  
        Maintainers will respond promptly to approve your proposal or provide feedback.
        This is the end of the Proposal form. You can review the rest of the development cycle below, but wait until you get maintainer approval before going ahead. 
        

  - type: markdown
    attributes:
      value: |
        **Development Section** - *You can edit these parts after maintainer approval*
        <!--- This header will remain visible but the following sections can be modified later -->

  - type: textarea
    id: development_steps
    attributes:
      label: "Development Progress"
      description: "Update this section as you work on your implementation"
      placeholder: |
        [Click Edit above to update these sections after approval]
        
        3. Fork created: [your fork link]
        4. Prototype: [notebook/prototype link]
        5. UCC integration: [brief status update]
      value: |
        ### Development Guide
        3. **Create a fork**: [link your fork]  
        4. **Prototype implementation**: [link notebook/script]  
        5. **Integrate into UCC**: [status update]
    validations:
      required: false

  - type: textarea 
    id: benchmarking_info
    attributes:
      label: "Benchmarking Updates"
      placeholder: "Add benchmark results or progress here after approval"
      value: |
        ### Benchmarking
        - **PR link**: [your benchmark PR]
        - **Local results**: [summary]
        - **Metric changes**: [observed improvements]
    validations:
      required: false

  - type: markdown
    attributes:
      value: |
        ### Resources
        [These will always appear at bottom]
