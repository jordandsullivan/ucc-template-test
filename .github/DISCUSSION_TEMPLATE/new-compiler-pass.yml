labels: ["New Compiler Pass"]
title: "[NEW PASS] "
body:

  - type: markdown
    attributes:
      value: |
        > #### _What's a "compiler pass?"_
        > In UCC (Unitary Compiler Collection), we consider any technique which takes a "raw" uncompiled quantum circuit and returns a circuit which performs better on our [benchmarks](https://github.com/unitaryfoundation/ucc-bench?tab=readme-ov-file#latest-results) to be a good compiler pass. You can work at any layer of the quantum computing stack, from low-level hardware control to high-level algorithmic optimization.

  - type: markdown
    attributes:
      value: |
        ### Propose your compiler pass
        So you want to implement a new compilation technique in UCC? Huzzah! To get started, please tell us:

  - type: textarea
    id: technique_work
    attributes:
      label: "1. How the technique works"
      description: |
        a. Provide a written abstract without too much jargon (cite arXiv paper/GitHub repo if applicable)  
        b. *(Optional)* Attach a diagram showing an example circuit transformation (you can add this later)
      value: |
        Example response:
        "This pass optimizes 2-qubit gate sequences using techniques from [Paper XYZ]. Here's how it transforms a CX gate sequence..."
    validations:
      required: true
  
  - type: textarea
    id: performance_expectations
    attributes:
      label: "2. Performance expectations"
      description: |
        a. What circuit types will this improve? (e.g., dynamic circuits, error correction)  
        b. Which [UCC metrics](https://ucc.readthedocs.io/en/latest/benchmarking.html) will it impact? (gate counts, errors, etc.)
      value: |
        Example response:
        "This should reduce 2-qubit gates in circuits with >50 Toffoli gates..."
    validations:
      required: false

  - type: markdown
    attributes:
      value: |
        **Important:** After filling out sections 1-2, scroll to the bottom of this page and click "Start discussion". **Leave the rest of the template below intact!** You'll be editing it later :)
        Maintainers will respond promptly to approve your proposal or provide feedback.        

  - type: textarea
    id: development
    attributes:
      label: "Develop your compiler pass"
      description: |
        a. What circuit types will this improve? (e.g., dynamic circuits, error correction)  
        b. Which [UCC metrics](https://ucc.readthedocs.io/en/latest/benchmarking.html) will it impact? (gate counts, errors, etc.)
      value: |
        After maintainers have approved your proposal...
        recommend coming back to this discussion and editing as you move along through the development process. 
        Develop your compiler pass
        Once the maintainers have given you the go-ahead...
        
        3. Create a [fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) of UCC to develop in: [link your fork here]  
            **Hint:** We recommending [syncing your fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork) with the main branch of UCC to stay up to date with changes. 
        5. Implement and Validate a Prototype of the Pass:  
            A Jupyter notebook or a small script is sufficient for the prototype: [link prototype script/notebook here].  
            **Important:** Make sure your compiler pass works as you expect on the circuits you defined in step 2a.
        
        6. Implement the New Pass in the UCC Codebase:  
        Documentation to guide you through this process is available in the [user guide](https://ucc.readthedocs.io/en/latest/user_guide.html). For more detailed information and examples, refer to the [Qiskit documentation](https://docs.quantum.ibm.com/guides/custom-transpiler-pass).
        
       ------- 
        ### Benchmark performance
        UCC benchmarks live in the separate repo called [ucc-bench](https://github.com/unitaryfoundation/ucc-bench). We have a [suite of quantum circuits](https://github.com/unitaryfoundation/ucc-bench/tree/main/benchmarks) that we regularly benchmark UCC and other popular quantum compilers on. Several of the key metrics we track are:
        
        - Pure compilation:
            - 2-qubit gate count after circuit compilation (lower is better)
            - Total runtime of compilation (lower is better)
        - Simulation
            - Relative errors in simulated expectation values for a defined set of observables (lower is better)
        
        Your new pass should improve one or more of these metrics on our existing benchmark suite.  
        **Note:** If you are introducing a technique whose effect on performance is not currently measurable by our [benchmark suite](https://github.com/unitaryfoundation/ucc-bench/tree/main/benchmarks) (e.g. a new qubit mapping pass that performs very well on sparsely connected qubit layouts), let us know and we can work with you to add the metric into [ucc-bench](github.com/unitaryfoundation/ucc-bench).
        
        #### When you are ready to run benchmarks...  
        
        6. Open a [pull request (PR) to merge your fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) of UCC in main (mark it as a Draft unless you are ready for final review), ping a UCC maintainer, and we will trigger the benchmarking suite to run. Alternately, you can also run the benchmarks locally by comparing your UCC version to main, as explained in the [ucc-bench README](https://github.com/unitaryfoundation/ucc-bench#). 
        
        ---
        
        ### Useful documentation
        [Contributing Guide](https://ucc.readthedocs.io/en/latest/contributing.html)  
        [Setting up your Developer Environment](https://ucc.readthedocs.io/en/latest/contributing.html#setting-up-your-development-environment)  
        [Writing a Custom Transpiler Pass](https://ucc.readthedocs.io/en/latest/user_guide.html#writing-a-custom-pass) 
        -We use "transpiler pass" to refer to transformations that act only on the Directed Acyclic Graph (DAG) representation of the quantum circuit. Higher or lower-level optimizations (e.g. algorithm-level or pulse-level, respectively), we call "compiler passes." 
    validations:
      required: false
